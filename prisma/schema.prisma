generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
}

model User {
  id         Int           @id @default(autoincrement())
  email      String        @unique
  name       String        @db.VarChar(64)
  surname    String        @db.VarChar(64)
  photo      String?
  isActive   Boolean       @default(true)
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  isVerified Boolean       @default(false)
  role       UserRole      @default(USER)
  metaData   UserMetaData?

  messages         GuestBookMessage[]
  messageReactions MessageReaction[]
  PostLike         PostLike[]
}

model UserMetaData {
  userId   Int      @id
  ip       String
  city     String?
  region   String?
  country  String?
  timezone String?
  lastSeen DateTime
  device   String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model GuestBookMessage {
  id        Int      @id @default(autoincrement())
  authorId  Int
  body      String
  isEdited  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  author    User              @relation(fields: [authorId], references: [id], onDelete: Cascade)
  reactions MessageReaction[]

  @@index([createdAt, id])
}

model PostView {
  slug String @id

  viewsCount Int @default(0)
  likesCount Int @default(0)

  likes PostLike[]
}

model PostLike {
  userId Int
  slug   String

  user User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  post PostView @relation(fields: [slug], references: [slug], onDelete: Cascade)

  @@id([userId, slug])
}

model MessageReaction {
  userId    Int
  messageId Int

  emoji String

  user    User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  message GuestBookMessage @relation(fields: [messageId], references: [id], onDelete: Cascade)

  @@id([userId, messageId, emoji])
}
